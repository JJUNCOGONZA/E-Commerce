name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'  # o 'zulu' si prefieres Zulu OpenJDK
          java-version: '17'

      - name: Verify directory structure
        run: ls -al  # Verificar la estructura de directorios

      - name: Build and Test Order Service
        run: |
          if [ -d "./order" ]; then
            cd order
            mvn clean install
          else
            echo "Directory 'order' does not exist."
            exit 1
          fi

      - name: Build and Test Product Catalog Service
        run: |
          if [ -d "./product-catalog" ]; then
            cd product-catalog
            mvn clean install
          else
            echo "Directory 'product-catalog' does not exist."
            exit 1
          fi

      - name: Increment version for Order Service
        id: increment_version_order
        run: |
          if [ -d "./order" ]; then
            cd order
            CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$NF++;print}')
            echo "New version: $NEW_VERSION"
            mvn versions:set -DnewVersion=$NEW_VERSION
            echo "new_version_order=$NEW_VERSION" >> $GITHUB_ENV
          else
            echo "Directory 'order' does not exist."
            exit 1
          fi

      - name: Increment version for Product Catalog Service
        id: increment_version_product
        run: |
          if [ -d "./product-catalog" ]; then
            cd product-catalog
            CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$NF++;print}')
            echo "New version: $NEW_VERSION"
            mvn versions:set -DnewVersion=$NEW_VERSION
            echo "new_version_product=$NEW_VERSION" >> $GITHUB_ENV
          else
            echo "Directory 'product-catalog' does not exist."
            exit 1
          fi

      - name: Commit and push version increment for Order Service
        run: |
          if [ -d "./order" ]; then
            cd order
            git config --global user.name 'github-actions'
            git config --global user.email 'github-actions@github.com'
            git add pom.xml
            git commit -m "Increment version to ${{ env.new_version_order }}"
            git push origin HEAD:main
          else
            echo "Directory 'order' does not exist."
            exit 1
          fi

      - name: Commit and push version increment for Product Catalog Service
        run: |
          if [ -d "./product-catalog" ]; then
            cd product-catalog
            git config --global user.name 'github-actions'
            git config --global user.email 'github-actions@github.com'
            git add pom.xml
            git commit -m "Increment version to ${{ env.new_version_product }}"
            git push origin HEAD:main
          else
            echo "Directory 'product-catalog' does not exist."
            exit 1
          fi

      - name: Generate changelog for Order Service
        id: generate_changelog_order
        uses: mikepenz/release-changelog-builder-action@v2
        with:
          configuration: .github/changelog-config.json

      - name: Generate changelog for Product Catalog Service
        id: generate_changelog_product
        uses: mikepenz/release-changelog-builder-action@v2
        with:
          configuration: .github/changelog-config.json

      - name: Create Release for Order Service
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.new_version_order }}
          release_name: Release ${{ env.new_version_order }}
          body: ${{ steps.generate_changelog_order.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Create Release for Product Catalog Service
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.new_version_product }}
          release_name: Release ${{ env.new_version_product }}
          body: ${{ steps.generate_changelog_product.outputs.changelog }}
          draft: false
          prerelease: false
